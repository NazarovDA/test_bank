version: '3.8'

services:
  api-service:
    build:
      context: .
      dockerfile: api/Dockerfile
    environment:
      - DB_HOST=db
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_QUEUE=transaction_queue
      - API_PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      - db
      - rabbitmq

  transaction-worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      - DB_HOST=db
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_QUEUE=transaction_queue
    depends_on:
      - db
      - rabbitmq

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "15672:15672"
      - "5672:5672"

  test: 
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      - api-service
    entrypoint: ["go", "test", "-v", "./test"]
    # run using docker-compose up --build test

volumes:
  db_data:
