services:
  api-service:
    build:
      context: .
      dockerfile: api/Dockerfile
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_TRANSACTION_QUEUE=transaction_queue
      - RABBITMQ_LOG_QUEUE=log_queue
      - API_PORT=8080
      - WORKER_PORT=8080
      - LOGGER_PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      transaction-worker:
        condition: service_started
    restart: always

  transaction-worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      - DB_HOST=db
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_TRANSACTION_QUEUE=transaction_queue
      - RABBITMQ_LOG_QUEUE=log_queue
      - WORKER_PORT=8080
    healthcheck:
      test: ["CMD", "curl", "http://transaction-worker/isalive"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      logger:
        condition: service_started
    restart: always

  logger:
    build:
      context: .
      dockerfile: logger/Dockerfile
    environment:
      - DB_HOST=db
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_LOG_QUEUE=log_queue
      - LOGGER_PORT=8080
    healthcheck:
      test: ["CMD", "curl", "http://logger/isalive"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always

volumes:
  db_data:
